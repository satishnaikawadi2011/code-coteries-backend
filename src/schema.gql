# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Experience {
  id: String!
  title: String!
  company: String!
  location: String!
  from: DateTime!
  to: DateTime
  current: Boolean!
  description: String!
  profile: Profile!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Social {
  id: String!
  youtube: String
  facebook: String
  instagram: String
  twitter: String
  linkedin: String
}

type Profile {
  id: String!
  website: String
  company: String
  location: String
  bio: String
  github: String
  image_url: String!
  experience: [Experience!]
  education: [Education!]
  social: Social
}

type Education {
  id: String!
  school: String!
  degree: String!
  from: DateTime!
  to: DateTime
  current: Boolean!
  description: String!
  field: String!
  profile: Profile!
}

type PostComment {
  id: String!
  content: String!
  handle: String!
  created_at: DateTime!
  updated_at: DateTime!
  likes: [String!]!
  user: User!
  post: Post!
}

type EventComment {
  id: String!
  content: String!
  handle: String!
  created_at: DateTime!
  updated_at: DateTime!
  likes: [String!]!
  user: User!
  event: Event!
}

type Event {
  id: String!
  title: String!
  description: String!
  image_url: String!
  event_url: String!
  created_at: DateTime!
  event_date: String!
  updated_at: DateTime!
  user: User!
  comments: [EventComment!]
  likes: [String!]!
  likeCount: Float!
  handle: String!
  avatar_url: String!
  tags: [Tag!]
}

type Tag {
  id: String!
  name: String!
  description: String!
  likes: [String!]!
  created_at: DateTime!
  updated_at: DateTime!
  posts: [Post!]
  events: [Event!]
  likesCount: Float!
}

type Post {
  id: String!
  caption: String!
  image_url: String!
  created_at: String!
  updated_at: String!
  user: User!
  comments(lastTimestamp: String, limit: Float = 10): [PostComment!]
  likes: [String!]!
  handle: String!
  avatar_url: String!
  likeCount: Float!
  commentCount: Float!
  tags: [Tag!]
}

type User {
  id: String!
  username: String!
  email: String!
  fullName: String!
  is_active: Boolean!
  is_admin: Boolean!
  created_at: DateTime!
  updated_at: DateTime!
  saved_posts: [String!]!
  profile: Profile
  connections: [User!]
  events: [Event!]
  posts: [Post!]
  post_comments: [PostComment!]
  event_comments: [EventComment!]
  followingCount: Float!
  followerCount: Float!
}

type AuthResponse {
  user: User!
  token: String!
}

type CommentResponse {
  postComment: PostComment
  eventComment: EventComment
}

type Query {
  me: User!
  suggestUsers(suggestUsersInput: SuggestUsersInput!): [User!]!
  searchUsers(limit: Float, query: String!): [User!]!
  getMyProfile: Profile!
  getMyFollowers: [User!]!
  getMyFollowings: [User!]!
  getMySocial: Social!
  getPost(postId: String!): Post!
  getAllPosts(take: Float, skip: Float): [Post!]!
  getFeed(getFeedInput: GetFeedInput!): [Post!]!
  getPostsByTag(tagId: String!): [Post!]!
  getAllTags: [Tag!]!
  getEvent(eventId: String!): Event!
  getEventsByTag(tagId: String!): [Event!]!
}

input SuggestUsersInput {
  limit: Int
  created_at: String!
  followerIds: [String!] = []
}

input GetFeedInput {
  limit: Int
  lastTimestamp: String
  feedIds: [String!] = []
}

type Mutation {
  registerUser(createUserInput: CreateUserInput!): AuthResponse!
  signinUser(signinUserInput: SigninUserInput!): AuthResponse!
  addPostToBookmark(postId: String!): String!
  removePostFromBookmark(postId: String!): String!
  editProfile(editProfileInput: EditProfileInput!): Profile!
  addEducation(addEducationInput: AddEducationInput!): Education!
  followUser(id: String!): User!
  unfollowUser(id: String!): String!
  editEducation(editEducationInput: EditEducationInput!, id: String!): Education!
  removeEducation(id: String!): String!
  addExperience(addExperienceInput: AddExperienceInput!): Experience!
  editExperience(editExperienceInput: EditExperienceInput!, id: String!): Experience!
  removeExperience(id: String!): String!
  editSocial(editSocialInput: EditSocialInput!): Social!
  editUserAvatar(url: String!): Profile!
  createPost(createPostInput: CreatePostInput!): Post!
  deletePost(postId: String!): String!
  likePost(postId: String!): Post!
  createTag(createTagInput: CreateTagInput!): Tag!
  addComment(addCommentInput: AddCommentInput!): CommentResponse!
  likeComment(type: String!, commentId: String!): CommentResponse!
  createEvent(addEventInput: AddEventInput!): Event!
  likeEvent(eventId: String!): Event!
}

input CreateUserInput {
  username: String!
  password: String!
  email: String!
  fullName: String!
}

input SigninUserInput {
  username: String!
  password: String!
}

input EditProfileInput {
  company: String
  website: String
  location: String
  github: String
  bio: String
  image_url: String
}

input AddEducationInput {
  field: String!
  school: String!
  degree: String!
  from: String!
  to: String
  current: Boolean = false
  description: String!
}

input EditEducationInput {
  field: String
  school: String
  degree: String
  from: String
  to: String
  current: Boolean = false
  description: String
}

input AddExperienceInput {
  title: String!
  company: String!
  location: String!
  from: String!
  to: String
  current: Boolean = false
  description: String!
}

input EditExperienceInput {
  title: String
  company: String
  location: String
  from: String
  to: String
  current: Boolean = false
  description: String
}

input EditSocialInput {
  youtube: String
  twitter: String
  instagram: String
  facebook: String
  linkedin: String
}

input CreatePostInput {
  caption: String!
  image_url: String!
  tagIds: [String!] = []
}

input CreateTagInput {
  name: String!
  description: String!
}

input AddCommentInput {
  content: String!
  commentType: String!
  entityId: String!
}

input AddEventInput {
  title: String!
  description: String!
  image_url: String!
  event_url: String!
  event_date: String!
  tagIds: [String!] = []
}
